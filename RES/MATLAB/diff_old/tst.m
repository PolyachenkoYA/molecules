close all;
clear;

%n = [0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.12, 0.14, 0.15, 0.17, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9];
% n = [0.0100,     0.0200,     0.0300,     0.0400,     0.0500,     0.0600,     0.0700,     0.0800,     0.0900,     0.1000,     0.1200,     0.1400,     0.1600,     0.1800,     0.2000,     0.2200,     0.2400,     0.2600,     0.2800,     0.3000,     0.3200,     0.3400,     0.3600,     0.3800,     0.4000,     0.4200,     0.4400,     0.4600,     0.4800,     0.5000,     0.5200,     0.5400,     0.5600,     0.5800,     0.6000,     0.6200,     0.6400,     0.6600,     0.6800,     0.7000,     0.7200,     0.7400,     0.7600,     0.7800,     0.8000,     0.8200,     0.8400,     0.8600,     0.8800,     0.9000];
n = [0.01:0.01:0.1 0.12:0.02:0.9];
% T = [1.3200,     1.3400,     1.3600,     1.3800,     1.4000,     1.4200,     1.4400,     1.4600,     1.4800,     1.5000,     1.5200,     1.5400,     1.5600,     1.5800,     1.6000,     1.6200,     1.6400,     1.6600,     1.6800,     1.7000,     1.7200,     1.7400,     1.7600,     1.7800,     1.8000,     1.8200,     1.8400,     1.8600,     1.8800,     1.9000,     1.9200,     1.9400,     1.9600,     1.9800,     2.0000,     2.0200,     2.0400,     2.0600,     2.0800,     2.1000,     2.1200,     2.1400,     2.1600,     2.1800,     2.2000,     2.2200,     2.2400,     2.2600,     2.2800,     2.3000,     2.3200,     2.3400,     2.3600,     2.3800,     2.4000,     2.4200,     2.4400,     2.4600,     2.4800,     2.5000,     2.5200,     2.5400,     2.5600,     2.5800,     2.6000,     2.6200,     2.6400,     2.6600,     2.6800,     2.7000,     2.7200,     2.7400,     2.7600,     2.7800,     2.8000,     2.8200,     2.8400,     2.8600,     2.8800,     2.9000,     2.9200,     2.9400,     2.9600,     2.9800,     3.0000,     3.0200,     3.0400,     3.0600,     3.0800,     3.1000,     3.1200,     3.1400,     3.1600,     3.1800,     3.2000,     3.2200,     3.2400,     3.2600,     3.2800,     3.3000,     3.3200,     3.3400,     3.3600,     3.3800,     3.4000,     3.4200,     3.4400,     3.4600,     3.4800,     3.5000,     3.5200,     3.5400,     3.5600,     3.5800,     3.6000,     3.6200,     3.6400,     3.6600,     3.6800,     3.7000,     3.7200,     3.7400,     3.7600,     3.7800,     3.8000,     3.8200,     3.8400,     3.8600,     3.8800,     3.9000,     3.9200,     3.9400,     3.9600,     3.9800,     4.0000,     4.0200,     4.0400,     4.0600,     4.0800,     4.1000,     4.1200,     4.1400,     4.1600,     4.1800,     4.2000,     4.2200,     4.2400,     4.2600,     4.2800,     4.3000,     4.3200,     4.3400,     4.3600,     4.3800,     4.4000,     4.4200,     4.4400,     4.4600,     4.4800,     4.5000,     4.5200,     4.5400,     4.5600,     4.5800,     4.6000,     4.6200,     4.6400,     4.6600,     4.6800,     4.7000,     4.7200,     4.7400,     4.7600,     4.7800,     4.8000,     4.8200,     4.8400,     4.8600,     4.8800,     4.9000,     4.9200,     4.9400,     4.9600,     4.9800,     5.0000];
T = 1.32:0.02:5;
%n = n(n > 0.1);
%T = [2 3 4 5];

line_time = 3; % 3 gives the best accuracy
ballistic_time = 0.5;
sazerlend_time = 10;
filename = 'results_whole_S10.txt';
base_path = fullfile('DATA', 'N1e4_dt1e-3');
full_path = fullfile(base_path, filename);
brd = [0.1 1];
ticks = [0.01 0.012 0.014 0.016 0.018 0.02 0.023 0.026 0.03 0.035 0.04 0.05 0.06 0.07 0.08 0.1 0.12 0.15 0.2 0.25 0.3 0.4, 0.5, 0.6, 0.7, 0.8, 1, 1.2, 1.4, 1.7, 2, 2.5, 3];
%tit = 'log_{10}(err)';
tit = '|\lambda / \lambda_0 - 1|';
log_scale = 0;

if(exist(full_path,'file') ~= 2)
    res_file_create(base_path, n, T, filename, line_time, ballistic_time, sazerlend_time);
end

data = load_data(full_path); % TODO

exp_names = {'a', 'tg', 'log_t', 'log_L'};
exp_i = [2 3 4];
th_names = {'th_0', 'th_S', 'th_T'};
th_i = [3];
self_c = 2;

if(self_c > 1)
    exp_i = [];
    th_i = [];
end
for t_i = th_i
    for e_i = exp_i
        res_cmp(T, n, data.Lmd(:,t_i), data.Lmd(:,3 + e_i), brd, [tit ' | ' th_names{t_i} ' vs ' exp_names{e_i}], ticks, log_scale);
    end
end
if(self_c)
    res_cmp(T, n, data.Lmd(:,4), data.Lmd(:,5), [0.05 1], 'linear self-consistency | a-tg', ticks, log_scale);
    res_cmp(T, n, data.Lmd(:,6), data.Lmd(:,7), [0.1 1], 'log self-consistency | log_\tau-log_L', ticks, log_scale);
    res_cmp(T, n, data.Lmd(:,6), data.Lmd(:,5), [0.1 1], 'log self-consistency | tg-log_\tau', ticks, log_scale);
    res_cmp(T, n, data.Lmd(:,7), data.Lmd(:,5), [0.1 1], 'log self-consistency | tg-log_L', ticks, log_scale);
end
